//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DatabaseManager.DatabaseServiceReference {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="DatabaseServiceReference.IDatabaseManager", CallbackContract=typeof(DatabaseManager.DatabaseServiceReference.IDatabaseManagerCallback))]
    public interface IDatabaseManager {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IDatabaseManager/InitService")]
        void InitService();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IDatabaseManager/InitService")]
        System.Threading.Tasks.Task InitServiceAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManager/LogIn", ReplyAction="http://tempuri.org/IDatabaseManager/LogInResponse")]
        string LogIn(string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManager/LogIn", ReplyAction="http://tempuri.org/IDatabaseManager/LogInResponse")]
        System.Threading.Tasks.Task<string> LogInAsync(string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManager/Register", ReplyAction="http://tempuri.org/IDatabaseManager/RegisterResponse")]
        bool Register(string username, string password, string role);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManager/Register", ReplyAction="http://tempuri.org/IDatabaseManager/RegisterResponse")]
        System.Threading.Tasks.Task<bool> RegisterAsync(string username, string password, string role);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManager/DbContainsUser", ReplyAction="http://tempuri.org/IDatabaseManager/DbContainsUserResponse")]
        bool DbContainsUser();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManager/DbContainsUser", ReplyAction="http://tempuri.org/IDatabaseManager/DbContainsUserResponse")]
        System.Threading.Tasks.Task<bool> DbContainsUserAsync();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IDatabaseManager/DeleteAO")]
        void DeleteAO(string id);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IDatabaseManager/DeleteAO")]
        System.Threading.Tasks.Task DeleteAOAsync(string id);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IDatabaseManager/DeleteDO")]
        void DeleteDO(string id);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IDatabaseManager/DeleteDO")]
        System.Threading.Tasks.Task DeleteDOAsync(string id);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IDatabaseManager/DeleteAI")]
        void DeleteAI(string id);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IDatabaseManager/DeleteAI")]
        System.Threading.Tasks.Task DeleteAIAsync(string id);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IDatabaseManager/DeleteDI")]
        void DeleteDI(string id);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IDatabaseManager/DeleteDI")]
        System.Threading.Tasks.Task DeleteDIAsync(string id);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IDatabaseManager/AddAO")]
        void AddAO(string tagName, string description, string address, double initvalue, double lowlimit, double highlimit);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IDatabaseManager/AddAO")]
        System.Threading.Tasks.Task AddAOAsync(string tagName, string description, string address, double initvalue, double lowlimit, double highlimit);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IDatabaseManager/AddAI")]
        void AddAI(string tagName, string description, string driver, string address, int scantime, bool onoffscan, double lowlimit, double highlimit, string units);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IDatabaseManager/AddAI")]
        System.Threading.Tasks.Task AddAIAsync(string tagName, string description, string driver, string address, int scantime, bool onoffscan, double lowlimit, double highlimit, string units);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IDatabaseManager/AddDO")]
        void AddDO(string tagName, string description, string address, double initvalue);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IDatabaseManager/AddDO")]
        System.Threading.Tasks.Task AddDOAsync(string tagName, string description, string address, double initvalue);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IDatabaseManager/AddDI")]
        void AddDI(string tagName, string description, string driver, string address, int scantime, bool onoffscan);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IDatabaseManager/AddDI")]
        System.Threading.Tasks.Task AddDIAsync(string tagName, string description, string driver, string address, int scantime, bool onoffscan);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IDatabaseManager/UpdateAO")]
        void UpdateAO(string tagName, string description, string address, double initvalue, double lowlimit, double highlimit);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IDatabaseManager/UpdateAO")]
        System.Threading.Tasks.Task UpdateAOAsync(string tagName, string description, string address, double initvalue, double lowlimit, double highlimit);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IDatabaseManager/UpdateAI")]
        void UpdateAI(string tagName, string description, string driver, string address, int scantime, bool onoffscan, double lowlimit, double highlimit, string units);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IDatabaseManager/UpdateAI")]
        System.Threading.Tasks.Task UpdateAIAsync(string tagName, string description, string driver, string address, int scantime, bool onoffscan, double lowlimit, double highlimit, string units);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IDatabaseManager/UpdateDO")]
        void UpdateDO(string tagName, string description, string address, double initvalue);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IDatabaseManager/UpdateDO")]
        System.Threading.Tasks.Task UpdateDOAsync(string tagName, string description, string address, double initvalue);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IDatabaseManager/UpdateDI")]
        void UpdateDI(string tagName, string description, string driver, string address, int scantime, bool onoffscan);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IDatabaseManager/UpdateDI")]
        System.Threading.Tasks.Task UpdateDIAsync(string tagName, string description, string driver, string address, int scantime, bool onoffscan);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManager/GetAllAO", ReplyAction="http://tempuri.org/IDatabaseManager/GetAllAOResponse")]
        string GetAllAO();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManager/GetAllAO", ReplyAction="http://tempuri.org/IDatabaseManager/GetAllAOResponse")]
        System.Threading.Tasks.Task<string> GetAllAOAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManager/GetAllAI", ReplyAction="http://tempuri.org/IDatabaseManager/GetAllAIResponse")]
        string GetAllAI();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManager/GetAllAI", ReplyAction="http://tempuri.org/IDatabaseManager/GetAllAIResponse")]
        System.Threading.Tasks.Task<string> GetAllAIAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManager/GetAllDO", ReplyAction="http://tempuri.org/IDatabaseManager/GetAllDOResponse")]
        string GetAllDO();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManager/GetAllDO", ReplyAction="http://tempuri.org/IDatabaseManager/GetAllDOResponse")]
        System.Threading.Tasks.Task<string> GetAllDOAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManager/GetAllDI", ReplyAction="http://tempuri.org/IDatabaseManager/GetAllDIResponse")]
        string GetAllDI();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManager/GetAllDI", ReplyAction="http://tempuri.org/IDatabaseManager/GetAllDIResponse")]
        System.Threading.Tasks.Task<string> GetAllDIAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManager/GetStrAO", ReplyAction="http://tempuri.org/IDatabaseManager/GetStrAOResponse")]
        string GetStrAO(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManager/GetStrAO", ReplyAction="http://tempuri.org/IDatabaseManager/GetStrAOResponse")]
        System.Threading.Tasks.Task<string> GetStrAOAsync(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManager/GetStrAI", ReplyAction="http://tempuri.org/IDatabaseManager/GetStrAIResponse")]
        string GetStrAI(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManager/GetStrAI", ReplyAction="http://tempuri.org/IDatabaseManager/GetStrAIResponse")]
        System.Threading.Tasks.Task<string> GetStrAIAsync(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManager/GetStrDO", ReplyAction="http://tempuri.org/IDatabaseManager/GetStrDOResponse")]
        string GetStrDO(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManager/GetStrDO", ReplyAction="http://tempuri.org/IDatabaseManager/GetStrDOResponse")]
        System.Threading.Tasks.Task<string> GetStrDOAsync(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManager/GetStrDI", ReplyAction="http://tempuri.org/IDatabaseManager/GetStrDIResponse")]
        string GetStrDI(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManager/GetStrDI", ReplyAction="http://tempuri.org/IDatabaseManager/GetStrDIResponse")]
        System.Threading.Tasks.Task<string> GetStrDIAsync(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManager/GetIdListAO", ReplyAction="http://tempuri.org/IDatabaseManager/GetIdListAOResponse")]
        string GetIdListAO();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManager/GetIdListAO", ReplyAction="http://tempuri.org/IDatabaseManager/GetIdListAOResponse")]
        System.Threading.Tasks.Task<string> GetIdListAOAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManager/GetIdListAI", ReplyAction="http://tempuri.org/IDatabaseManager/GetIdListAIResponse")]
        string GetIdListAI();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManager/GetIdListAI", ReplyAction="http://tempuri.org/IDatabaseManager/GetIdListAIResponse")]
        System.Threading.Tasks.Task<string> GetIdListAIAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManager/GetIdListDO", ReplyAction="http://tempuri.org/IDatabaseManager/GetIdListDOResponse")]
        string GetIdListDO();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManager/GetIdListDO", ReplyAction="http://tempuri.org/IDatabaseManager/GetIdListDOResponse")]
        System.Threading.Tasks.Task<string> GetIdListDOAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManager/GetIdListDI", ReplyAction="http://tempuri.org/IDatabaseManager/GetIdListDIResponse")]
        string GetIdListDI();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManager/GetIdListDI", ReplyAction="http://tempuri.org/IDatabaseManager/GetIdListDIResponse")]
        System.Threading.Tasks.Task<string> GetIdListDIAsync();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IDatabaseManager/TurnScanOnOff")]
        void TurnScanOnOff(string tagType, string tagId, bool activity);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IDatabaseManager/TurnScanOnOff")]
        System.Threading.Tasks.Task TurnScanOnOffAsync(string tagType, string tagId, bool activity);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IDatabaseManager/ChangeValueAO")]
        void ChangeValueAO(string tagName, double value);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IDatabaseManager/ChangeValueAO")]
        System.Threading.Tasks.Task ChangeValueAOAsync(string tagName, double value);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IDatabaseManager/ChangeValueDO")]
        void ChangeValueDO(string tagName, double value);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IDatabaseManager/ChangeValueDO")]
        System.Threading.Tasks.Task ChangeValueDOAsync(string tagName, double value);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IDatabaseManager/AddAlarm")]
        void AddAlarm(string type, double value, string unit, string priority, string tagName);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IDatabaseManager/AddAlarm")]
        System.Threading.Tasks.Task AddAlarmAsync(string type, double value, string unit, string priority, string tagName);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IDatabaseManager/RemoveAlarm")]
        void RemoveAlarm(string tagName, string alarmId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IDatabaseManager/RemoveAlarm")]
        System.Threading.Tasks.Task RemoveAlarmAsync(string tagName, string alarmId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManager/GetAllAlarms", ReplyAction="http://tempuri.org/IDatabaseManager/GetAllAlarmsResponse")]
        string GetAllAlarms(string tagName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManager/GetAllAlarms", ReplyAction="http://tempuri.org/IDatabaseManager/GetAllAlarmsResponse")]
        System.Threading.Tasks.Task<string> GetAllAlarmsAsync(string tagName);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IDatabaseManagerCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IDatabaseManager/WriteToConsole")]
        void WriteToConsole(string message);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IDatabaseManagerChannel : DatabaseManager.DatabaseServiceReference.IDatabaseManager, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DatabaseManagerClient : System.ServiceModel.DuplexClientBase<DatabaseManager.DatabaseServiceReference.IDatabaseManager>, DatabaseManager.DatabaseServiceReference.IDatabaseManager {
        
        public DatabaseManagerClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public DatabaseManagerClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public DatabaseManagerClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public DatabaseManagerClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public DatabaseManagerClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void InitService() {
            base.Channel.InitService();
        }
        
        public System.Threading.Tasks.Task InitServiceAsync() {
            return base.Channel.InitServiceAsync();
        }
        
        public string LogIn(string username, string password) {
            return base.Channel.LogIn(username, password);
        }
        
        public System.Threading.Tasks.Task<string> LogInAsync(string username, string password) {
            return base.Channel.LogInAsync(username, password);
        }
        
        public bool Register(string username, string password, string role) {
            return base.Channel.Register(username, password, role);
        }
        
        public System.Threading.Tasks.Task<bool> RegisterAsync(string username, string password, string role) {
            return base.Channel.RegisterAsync(username, password, role);
        }
        
        public bool DbContainsUser() {
            return base.Channel.DbContainsUser();
        }
        
        public System.Threading.Tasks.Task<bool> DbContainsUserAsync() {
            return base.Channel.DbContainsUserAsync();
        }
        
        public void DeleteAO(string id) {
            base.Channel.DeleteAO(id);
        }
        
        public System.Threading.Tasks.Task DeleteAOAsync(string id) {
            return base.Channel.DeleteAOAsync(id);
        }
        
        public void DeleteDO(string id) {
            base.Channel.DeleteDO(id);
        }
        
        public System.Threading.Tasks.Task DeleteDOAsync(string id) {
            return base.Channel.DeleteDOAsync(id);
        }
        
        public void DeleteAI(string id) {
            base.Channel.DeleteAI(id);
        }
        
        public System.Threading.Tasks.Task DeleteAIAsync(string id) {
            return base.Channel.DeleteAIAsync(id);
        }
        
        public void DeleteDI(string id) {
            base.Channel.DeleteDI(id);
        }
        
        public System.Threading.Tasks.Task DeleteDIAsync(string id) {
            return base.Channel.DeleteDIAsync(id);
        }
        
        public void AddAO(string tagName, string description, string address, double initvalue, double lowlimit, double highlimit) {
            base.Channel.AddAO(tagName, description, address, initvalue, lowlimit, highlimit);
        }
        
        public System.Threading.Tasks.Task AddAOAsync(string tagName, string description, string address, double initvalue, double lowlimit, double highlimit) {
            return base.Channel.AddAOAsync(tagName, description, address, initvalue, lowlimit, highlimit);
        }
        
        public void AddAI(string tagName, string description, string driver, string address, int scantime, bool onoffscan, double lowlimit, double highlimit, string units) {
            base.Channel.AddAI(tagName, description, driver, address, scantime, onoffscan, lowlimit, highlimit, units);
        }
        
        public System.Threading.Tasks.Task AddAIAsync(string tagName, string description, string driver, string address, int scantime, bool onoffscan, double lowlimit, double highlimit, string units) {
            return base.Channel.AddAIAsync(tagName, description, driver, address, scantime, onoffscan, lowlimit, highlimit, units);
        }
        
        public void AddDO(string tagName, string description, string address, double initvalue) {
            base.Channel.AddDO(tagName, description, address, initvalue);
        }
        
        public System.Threading.Tasks.Task AddDOAsync(string tagName, string description, string address, double initvalue) {
            return base.Channel.AddDOAsync(tagName, description, address, initvalue);
        }
        
        public void AddDI(string tagName, string description, string driver, string address, int scantime, bool onoffscan) {
            base.Channel.AddDI(tagName, description, driver, address, scantime, onoffscan);
        }
        
        public System.Threading.Tasks.Task AddDIAsync(string tagName, string description, string driver, string address, int scantime, bool onoffscan) {
            return base.Channel.AddDIAsync(tagName, description, driver, address, scantime, onoffscan);
        }
        
        public void UpdateAO(string tagName, string description, string address, double initvalue, double lowlimit, double highlimit) {
            base.Channel.UpdateAO(tagName, description, address, initvalue, lowlimit, highlimit);
        }
        
        public System.Threading.Tasks.Task UpdateAOAsync(string tagName, string description, string address, double initvalue, double lowlimit, double highlimit) {
            return base.Channel.UpdateAOAsync(tagName, description, address, initvalue, lowlimit, highlimit);
        }
        
        public void UpdateAI(string tagName, string description, string driver, string address, int scantime, bool onoffscan, double lowlimit, double highlimit, string units) {
            base.Channel.UpdateAI(tagName, description, driver, address, scantime, onoffscan, lowlimit, highlimit, units);
        }
        
        public System.Threading.Tasks.Task UpdateAIAsync(string tagName, string description, string driver, string address, int scantime, bool onoffscan, double lowlimit, double highlimit, string units) {
            return base.Channel.UpdateAIAsync(tagName, description, driver, address, scantime, onoffscan, lowlimit, highlimit, units);
        }
        
        public void UpdateDO(string tagName, string description, string address, double initvalue) {
            base.Channel.UpdateDO(tagName, description, address, initvalue);
        }
        
        public System.Threading.Tasks.Task UpdateDOAsync(string tagName, string description, string address, double initvalue) {
            return base.Channel.UpdateDOAsync(tagName, description, address, initvalue);
        }
        
        public void UpdateDI(string tagName, string description, string driver, string address, int scantime, bool onoffscan) {
            base.Channel.UpdateDI(tagName, description, driver, address, scantime, onoffscan);
        }
        
        public System.Threading.Tasks.Task UpdateDIAsync(string tagName, string description, string driver, string address, int scantime, bool onoffscan) {
            return base.Channel.UpdateDIAsync(tagName, description, driver, address, scantime, onoffscan);
        }
        
        public string GetAllAO() {
            return base.Channel.GetAllAO();
        }
        
        public System.Threading.Tasks.Task<string> GetAllAOAsync() {
            return base.Channel.GetAllAOAsync();
        }
        
        public string GetAllAI() {
            return base.Channel.GetAllAI();
        }
        
        public System.Threading.Tasks.Task<string> GetAllAIAsync() {
            return base.Channel.GetAllAIAsync();
        }
        
        public string GetAllDO() {
            return base.Channel.GetAllDO();
        }
        
        public System.Threading.Tasks.Task<string> GetAllDOAsync() {
            return base.Channel.GetAllDOAsync();
        }
        
        public string GetAllDI() {
            return base.Channel.GetAllDI();
        }
        
        public System.Threading.Tasks.Task<string> GetAllDIAsync() {
            return base.Channel.GetAllDIAsync();
        }
        
        public string GetStrAO(string id) {
            return base.Channel.GetStrAO(id);
        }
        
        public System.Threading.Tasks.Task<string> GetStrAOAsync(string id) {
            return base.Channel.GetStrAOAsync(id);
        }
        
        public string GetStrAI(string id) {
            return base.Channel.GetStrAI(id);
        }
        
        public System.Threading.Tasks.Task<string> GetStrAIAsync(string id) {
            return base.Channel.GetStrAIAsync(id);
        }
        
        public string GetStrDO(string id) {
            return base.Channel.GetStrDO(id);
        }
        
        public System.Threading.Tasks.Task<string> GetStrDOAsync(string id) {
            return base.Channel.GetStrDOAsync(id);
        }
        
        public string GetStrDI(string id) {
            return base.Channel.GetStrDI(id);
        }
        
        public System.Threading.Tasks.Task<string> GetStrDIAsync(string id) {
            return base.Channel.GetStrDIAsync(id);
        }
        
        public string GetIdListAO() {
            return base.Channel.GetIdListAO();
        }
        
        public System.Threading.Tasks.Task<string> GetIdListAOAsync() {
            return base.Channel.GetIdListAOAsync();
        }
        
        public string GetIdListAI() {
            return base.Channel.GetIdListAI();
        }
        
        public System.Threading.Tasks.Task<string> GetIdListAIAsync() {
            return base.Channel.GetIdListAIAsync();
        }
        
        public string GetIdListDO() {
            return base.Channel.GetIdListDO();
        }
        
        public System.Threading.Tasks.Task<string> GetIdListDOAsync() {
            return base.Channel.GetIdListDOAsync();
        }
        
        public string GetIdListDI() {
            return base.Channel.GetIdListDI();
        }
        
        public System.Threading.Tasks.Task<string> GetIdListDIAsync() {
            return base.Channel.GetIdListDIAsync();
        }
        
        public void TurnScanOnOff(string tagType, string tagId, bool activity) {
            base.Channel.TurnScanOnOff(tagType, tagId, activity);
        }
        
        public System.Threading.Tasks.Task TurnScanOnOffAsync(string tagType, string tagId, bool activity) {
            return base.Channel.TurnScanOnOffAsync(tagType, tagId, activity);
        }
        
        public void ChangeValueAO(string tagName, double value) {
            base.Channel.ChangeValueAO(tagName, value);
        }
        
        public System.Threading.Tasks.Task ChangeValueAOAsync(string tagName, double value) {
            return base.Channel.ChangeValueAOAsync(tagName, value);
        }
        
        public void ChangeValueDO(string tagName, double value) {
            base.Channel.ChangeValueDO(tagName, value);
        }
        
        public System.Threading.Tasks.Task ChangeValueDOAsync(string tagName, double value) {
            return base.Channel.ChangeValueDOAsync(tagName, value);
        }
        
        public void AddAlarm(string type, double value, string unit, string priority, string tagName) {
            base.Channel.AddAlarm(type, value, unit, priority, tagName);
        }
        
        public System.Threading.Tasks.Task AddAlarmAsync(string type, double value, string unit, string priority, string tagName) {
            return base.Channel.AddAlarmAsync(type, value, unit, priority, tagName);
        }
        
        public void RemoveAlarm(string tagName, string alarmId) {
            base.Channel.RemoveAlarm(tagName, alarmId);
        }
        
        public System.Threading.Tasks.Task RemoveAlarmAsync(string tagName, string alarmId) {
            return base.Channel.RemoveAlarmAsync(tagName, alarmId);
        }
        
        public string GetAllAlarms(string tagName) {
            return base.Channel.GetAllAlarms(tagName);
        }
        
        public System.Threading.Tasks.Task<string> GetAllAlarmsAsync(string tagName) {
            return base.Channel.GetAllAlarmsAsync(tagName);
        }
    }
}
